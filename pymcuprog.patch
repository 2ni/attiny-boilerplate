diff --git a/pymcuprog/serialupdi/physical.py b/pymcuprog/serialupdi/physical.py
index 4e6a9ed..ab8e556 100644
--- a/pymcuprog/serialupdi/physical.py
+++ b/pymcuprog/serialupdi/physical.py
@@ -62,7 +62,14 @@ class UpdiPhysical:
         """
         self.logger.info("Opening port '%s' at %d baud (timeout %.01fs)", port, baud, timeout)
         try:
-            self.ser = serial.Serial(port, baud, parity=serial.PARITY_EVEN, timeout=timeout, stopbits=serial.STOPBITS_TWO)
+            self.ser = serial.serial_for_url(port, baud, parity=serial.PARITY_EVEN, timeout=timeout, stopbits=serial.STOPBITS_TWO, rtscts=False, dsrdtr=False, do_not_open=True)
+            self.ser.rts = 0  # needed so dtr really gets 0v
+            self.ser.dtr = 1
+            self.ser.open()
+            # dtr is only set when port is opened, and stable low after ~3ms.
+            # during that time some crap from uart can come in, which disturbs the updi communication
+            time.sleep(.01)
+            self.ser.flushInput()
         except SerialException:
             self.logger.error("Unable to open serial port '%s'", port)
             raise
@@ -90,8 +97,13 @@ class UpdiPhysical:
         # At 300 bauds, the break character will pull the line low for 30ms
         # Which is slightly above the recommended 24.6ms
         self.ser.close()
-        temporary_serial = serial.Serial(self.port, 300, parity=serial.PARITY_EVEN, timeout=self.timeout,
-                                         stopbits=serial.STOPBITS_ONE)
+        temporary_serial = serial.serial_for_url(self.port, 300, parity=serial.PARITY_EVEN, timeout=self.timeout,
+                                         stopbits=serial.STOPBITS_ONE, rtscts=False, dsrdtr=False, do_not_open=True)
+        temporary_serial.rts = 0  # needed so dtr reall gets 0v
+        temporary_serial.dtr = 1
+        temporary_serial.open()
+        time.sleep(.01)
+        temporary_serial.flushInput()
 
         # Send two break characters, with 1 stop bit in between
         temporary_serial.write([constants.UPDI_BREAK])
